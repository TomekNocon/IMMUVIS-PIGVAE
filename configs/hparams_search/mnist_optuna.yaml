# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val_loss"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 7

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 30

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 10 # number of random sampling runs before optimization starts
      n_ei_candidates: 28
    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.0001, 0.01)
      data.hparams.batch_size: choice(8)  # Added more options for meaningful optimization
      model.graph_ae.hparams.input_size: choice(512)
      model.graph_ae.hparams.num_layers: choice(4, 6, 8)
      model.graph_ae.hparams.num_heads: choice(4, 8, 16)
      model.graph_ae.hparams.emb_dim: choice(128, 256, 512)
      model.temperature_scheduler.hparams.initial_tau: interval(0.5, 1.0)
      model.temperature_scheduler.hparams.final_tau: interval(0.05, 0.2)
      model.entropy_weight_scheduler.hparams.initial_weight: interval(0.2, 0.5)
      model.entropy_weight_scheduler.hparams.final_weight:  interval(0.01, 0.1)  # Fixed reference
      model.critic.hparams.kld_loss_scale: interval(0.0001, 0.01)
      model.critic.hparams.perm_loss_scale: interval(0.0001, 0.9)
      model.critic.hparams.contrastive_loss_scale: interval(0.001, 0.07)
      model.critic.hparams.temperature: interval(0.5, 0.7)
